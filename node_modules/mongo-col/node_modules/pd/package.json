{
  "name": "pd",
  "version": "0.6.3",
  "description": "Manage propertyDescriptors, an OO utility",
  "keywords": [
    "oo",
    "oop",
    "propertydescriptor",
    "arch",
    "utility"
  ],
  "author": {
    "name": "Jake Verbaten",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/pd.git"
  },
  "main": "lib/pd",
  "engines": {
    "node": ">=0.4"
  },
  "scripts": {
    "test": "make test"
  },
  "devDependencies": {
    "mocha": "0.8.1"
  },
  "readme": "# pd [![Build Status][1]][2]\r\n\r\nHelping you do prototypical OO\r\n\r\n## Status: production ready\r\n\r\n## Example \r\n\r\n    var Animal = {\r\n        legs: 4,\r\n        walk: function () { ... }\r\n    };\r\n\r\n    var Cat = pd.extend(Object.create(Animal), {\r\n        nyan: function () { ... },\r\n        constructor: function () { this.lives = 9; return this; }\r\n    });\r\n\r\n    var cat = Object.create(Cat).constructor();\r\n\r\n## Motivation\r\n\r\nES5 OO is [verbose][8]\r\n\r\npd solves this with utilities and sugar.\r\n\r\n## Blog Posts\r\n\r\n - [Improving ES5 OO][9]\r\n - [Doing OO JS part 3][6]\r\n - [Doing OO JS part 2][5]\r\n - [Doing Object Oriented JavaScript][3]\r\n\r\n## Documentation\r\n\r\n### <a name=\"pd\" href=\"#pd\">pd (obj)</a>\r\n\r\npd converts all the values of your objects properties into property descriptors of those values.\r\n\r\n    pd({\r\n        \"foo\": \"bar\"\r\n    })\r\n\r\nis the same as\r\n\r\n    {\r\n        \"foo\": {\r\n            \"value\": \"bar\",\r\n            \"enumerable\": true,\r\n            \"writable\": true,\r\n            \"configurable\": true\r\n        }\r\n    }\r\n\r\n### <a name=\"pd.extend\" href=\"#pd.extend\">pd.extend (obj..)</a>\r\n\r\npd.extend extends an object with other objects. key clashes are given right preference\r\n\r\n    pd.extend(\r\n        {\r\n            \"one\": \"faz\",\r\n            \"three\": \"bar\"\r\n        },\r\n        {\r\n            \"two\": \"ni\",\r\n            \"three\": \"baz\"\r\n        },\r\n        {\r\n            \"three\": \"bas\",\r\n            \"four\": \"four\"\r\n        }\r\n    );\r\n\r\nis the same as\r\n\r\n    {\r\n        \"one\": \"faz\",\r\n        \"two\": \"ni\",\r\n        \"three\": \"bas\",\r\n        \"four\": \"four\"\r\n    }\r\n    \r\npd.extend returns the first object you pass in.\r\n\r\n### <a name=\"pd.bindAll\" href=\"#pd.bindAll\">pd.bindAll (obj..)</a>\r\n\r\npd.bindAll is similar to underscore's bindAll method. It takes an object and binds all it's methods to the object. It takes an optional list of objects to mix in\r\n\r\n    var o = {\r\n        constructor: function () { \r\n            pd.bindAll(this, {\r\n                draw: function () { \r\n                    /* use `this` with its \"correct\" value, i.e. `o` */\r\n                }\r\n            });\r\n        },\r\n        start: function (eventEmitter) {\r\n            // note `this.draw` would not work correctly if it wasn't bound\r\n            eventEmitter.on(\"draw\", this.draw);\r\n        }\r\n    };\r\n\r\n### <a name=\"pd.Name\" href=\"#pdName\">pd.Name</a>\r\n\r\npd.Name constructs a Name function. This name function when passed your object will\r\nreturn a privates object. This privates object cannot be accessed in any other \r\nway then calling Name.\r\n\r\nExample:\r\n\r\n    var Klass = (function () {\r\n        var privates = pd.Name();\r\n\r\n        return {\r\n            constructor: function (secret) {\r\n                privates(this).secret = secret;\r\n            },\r\n            getSecret: function () {\r\n                return privates(this).secret;\r\n            }\r\n        };\r\n    }());\r\n\r\n## Installation\r\n\r\n`npm install pd`\r\n\r\n## Test\r\n\r\n`make test`\r\n\r\n## Contributors\r\n\r\n - Raynos\r\n - Gozala\r\n\r\n## MIT Licenced\r\n\r\n  [1]: https://secure.travis-ci.org/Raynos/pd.png\r\n  [2]: http://travis-ci.org/Raynos/pd\r\n  [3]: http://raynos.org/blog/4/Doing-Object-Oriented-JavaScript\r\n  [4]: http://www.2ality.com/2011/06/prototypes-as-classes.html\r\n  [5]: http://raynos.org/blog/5/Doing-Object-Oriented-Javascript---part-2\r\n  [6]: http://raynos.org/blog/7/Doing-Object-Oriented-Javascript---part-3\r\n  [8]: https://gist.github.com/1384024\r\n  [9]: http://raynos.org/blog/17/Improving-ES5-OO-with-pd",
  "_id": "pd@0.6.3",
  "dist": {
    "shasum": "023dc65a5a81d7ac92af61534fa4182da69def90"
  },
  "_from": "pd@0.6.3"
}
